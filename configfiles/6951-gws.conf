# SOF-ELKÂ® Configuration File
# (C)2022 Lewes Technology Consulting, LLC and Megan Roddie
#
# This file parses JSON-formatted Google Workspace logs exported by <TOOL NAME>
#   See: https://github.com/megan201296/SOME_REPO

filter {
  if [type] == "gws" {
    if [raw][id][applicationName] == "admin" {
      date {
        match => [ "[raw][id][time]", "ISO8601" ]
      }

      mutate {
        rename => {
          "[raw][actor][email]" => "username"
          "[raw][ipAddress]" => "source_ip"
          "[raw][events][type]" => "event_type"
          "[raw][events][name]" => "event_name"
        }

        add_tag => [ "gws_admin" ]
      }

    } else if [raw][id][applicationName] == "drive" {
      date {
        match => [ "[raw][id][time]", "ISO8601" ]
      }

      if [raw][events][parameters] {
        # convert the [ { "name": "foo", "value": "bar" } ] array to [ { "foo": "bar" } ]
        # note that original source data also includes a number of name/boolValue pairs.  maybe coincidentally all of the boolValues were requested to be dropped
        ruby {
          path => "/usr/local/sof-elk/supporting-scripts/split_kv_to_fields.rb"
          script_params => {
            "source_field" => "[raw][events][parameters]"
            "destination_field" => "[raw][event_parameters]"
            "key_field" => "name"
            "val_field" => "value"
          }
        }
        # not sure if this is needed since these are all boolValue in the source array and shouldn't show up after the ruby processing
        mutate {
          remove_field => [
            "[raw][event_parameters][primary_event]",
            "[raw][event_parameters][billable]",
            "[raw][event_parameters][is_enrypted]",
            "[raw][event_parameters][owner_is_shared_drive]",
            "[raw][event_parameters][owner_is_team_drive]",
            "[raw][event_parameters][actor_is_collaborator_account]",
          ]

          add_tag => [ "gws_drive" ]
        }
      }
      mutate {
        rename => {
          "[raw][actor][email]" => "username"
          "[raw][ipAddress]" => "source_ip"
          "[raw][events][type]" => "event_type"
          "[raw][events][name]" => "event_name"

          "[raw][event_parameters]" => "event_parameters"
        }
        add_tag => [ "gws_user_accounts" ]
      }

    } else if [raw][id][applicationName] == "login" {
      date {
        match => [ "[raw][id][time]", "ISO8601" ]
      }

      mutate {
        rename => {
          "[raw][actor][email]" => "username"
          "[raw][ipAddress]" => "source_ip"
          "[raw][events][type]" => "event_type"
          "[raw][events][name]" => "event_name"
        }

        add_tag => [ "gws_login" ]
      }

    } else if [raw][id][applicationName] == "user_accounts" {
      date {
        match => [ "[raw][id][time]", "ISO8601" ]
      }

      mutate {
        rename => {
          "[raw][actor][email]" => "username"
          "[raw][ipAddress]" => "source_ip"
          "[raw][events][type]" => "event_type"
          "[raw][events][name]" => "event_name"
        }

        add_tag => [ "gws_user_accounts" ]
      }

    } else if "gws_email" in [tags] {
      # TODO: need to know which date field to use: start_date, end_date, or event_date
# "start_date", "end_date", "event_date"
      date {
        match => [ "[raw][event_date]", "yyyy/MM/dd HH:mm:ss" ]
      }
      mutate {
        rename => {
          "[raw][message_id]" => "message_id"
          "[raw][sender]" => "sender"
          "[raw][recipient]" => "recipient"
          "[raw][subject]" => "subject"
          "[raw][message_size]" => "message_size"
          "[raw][destination_ip]" => "destination_ip"
          "[raw][message_direction]" => "message_direction"
          "[raw][attachment_count]" => ""
          "[raw][event_target]" => "event_target"
          "[raw][event_status]" => "event_status"
          "[raw][encrypted]" => "encrypted"
          "[raw][response_code]" => "response_code"
          "[raw][event_description]" => "event_description"
        }
      }

      # remove angle brackets from the message id
      if [message_id] {
        mutate {
          gsub => [ "[message_id]", "<>", "" ]
        }
      }
    }

    # remove remaining fields
    mutate {
      remove_field => [ "raw" ]
    }
  }
}

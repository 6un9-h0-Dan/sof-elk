# SOF-ELKÂ® Configuration File
# (C)2022 Lewes Technology Consulting, LLC and Megan Roddie
#
# This file parses JSON-formatted Google Workspace logs exported by <TOOL NAME>
#   See: https://github.com/megan201296/SOME_REPO

filter {
  if [type] == "gws" {

    # timestamp for all JSON-originated log types
    if [raw][id][time] {
      date {
        match => [ "[raw][id][time]", "ISO8601" ]
      }

    # timestamp for CSV-based email log type
    } else if [raw][event_date] {
# should we keep "start_date", "end_date", "event_date"?  waiting for josh's call here
      # these should all be in UTC...
      date {
        match => [ "[raw][event_date]", "yyyy/MM/dd HH:mm:ss 'UTC'" ]
      }
    }

    # most log types have an array of events in each - this essentially iterates over that array of values
    if [raw][events] {
      split {
        field => "[raw][events]"
      }
    }

    # if there are event parameters, they are not in KV form - this make will
    # convert the [ { "name": "foo", "value": "bar" } ] array to [ { "foo": "bar" } ] form
    if [raw][events][parameters] {
      ruby {
        path => "/usr/local/sof-elk/supporting-scripts/split_kv_to_fields.rb"
        script_params => {
          "source_field" => "[raw][events][parameters]"
          "destination_field" => "[raw][event_parameters]"
          "key_field" => "name"
          "val_field" => "value"
        }
      }
    }

    if [raw][id][applicationName] == "admin" {
      mutate {
        rename => {
          "[raw][actor][email]" => "username"
          "[raw][ipAddress]" => "source_ip"
          "[raw][events][type]" => "event_type"
          "[raw][events][name]" => "event_name"

          "[raw][event_parameters]" => "event_parameters"
        }

        add_tag => [ "gws_admin" ]
      }

    } else if [raw][id][applicationName] == "drive" {
      mutate {
        rename => {
          "[raw][actor][email]" => "username"
          "[raw][ipAddress]" => "source_ip"
          "[raw][events][type]" => "event_type"
          "[raw][events][name]" => "event_name"

          "[raw][event_parameters]" => "event_parameters"
        }
        add_tag => [ "gws_drive" ]
      }

    } else if [raw][id][applicationName] == "login" {
      mutate {
        rename => {
          "[raw][actor][email]" => "username"
          "[raw][ipAddress]" => "source_ip"
          "[raw][events][type]" => "event_type"
          "[raw][events][name]" => "event_name"

          "[raw][event_parameters]" => "event_parameters"
        }

        add_tag => [ "gws_login" ]
      }

    } else if [raw][id][applicationName] == "user_accounts" {
      mutate {
        rename => {
          "[raw][actor][email]" => "username"
          "[raw][ipAddress]" => "source_ip"
          "[raw][events][type]" => "event_type"
          "[raw][events][name]" => "event_name"

          "[raw][event_parameters]" => "event_parameters"
        }

        add_tag => [ "gws_user_accounts" ]
      }

    } else if "gws_email" in [tags] {
      mutate {
        rename => {
          "[raw][message_id]" => "message_id"
          "[raw][sender]" => "sender"
          "[raw][recipient]" => "recipient"
          "[raw][subject]" => "subject"
          "[raw][message_size]" => "message_size"
          "[raw][destination_ip]" => "destination_ip"
          "[raw][message_direction]" => "message_direction"
          "[raw][attachment_count]" => "attachment_count"
          "[raw][event_target]" => "event_target"
          "[raw][event_status]" => "event_status"
          "[raw][encrypted]" => "encrypted"
          "[raw][response_code]" => "response_code"
          "[raw][event_description]" => "event_description"
        }
      }

      # remove angle brackets from the message id
      if [message_id] {
        mutate {
          gsub => [ "[message_id]", "<>", "" ]
        }
      }
    }

    # for some records, destination IP is blank, which will break subsequent parser operations
    if [destination_ip] == '' {
      mutate {
        remove_field => [ "destination_ip" ]
      }
    }

    # remove remaining fields
    mutate {
      remove_field => [ "raw" ]
    }
  }
}
